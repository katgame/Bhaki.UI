{"ast":null,"code":"import { HTTP_INTERCEPTORS, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { NotificationService } from 'app/service/notificationService';\nimport { Router } from '@angular/router';\nimport { TokenStorageService } from './token-storage.service';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token-storage.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"app/service/notificationService\";\nconst TOKEN_HEADER_KEY = 'Authorization';\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(token, router, notification) {\n      this.token = token;\n      this.router = router;\n      this.notification = notification;\n    }\n    intercept(req, next) {\n      let authReq = req;\n      const token = this.token.getToken();\n      if (token != null) {\n        authReq = req.clone({\n          headers: req.headers.set('Accept', 'application/json')\n        });\n        authReq = req.clone({\n          headers: req.headers.set('content-type', 'application/json')\n        });\n        authReq = req.clone({\n          headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n        });\n      }\n      return next.handle(authReq).pipe(map(event => {\n        return event;\n      }), catchError((error, caught) => {\n        switch (error.status) {\n          case 400:\n            break;\n          case 401:\n            this.router.navigate(['login-form']);\n            this.notification.showNotification('bottom', 'center', 'Unauthorized login! Please try again.', 'danger');\n            break;\n          case 403:\n            this.notification.showNotification('bottom', 'center', 'You are not allowed to access this information', 'danger');\n            break;\n          default:\n            this.notification.showNotification('bottom', 'center', 'Service could not be reached. Please contact your Admin', 'danger');\n            break;\n        }\n        return throwError(() => new Error('The Error'));\n      }));\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}