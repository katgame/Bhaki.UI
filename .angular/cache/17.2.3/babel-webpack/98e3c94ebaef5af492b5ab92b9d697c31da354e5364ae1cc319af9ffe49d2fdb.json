{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { HostService } from \"app/service/bhaki-service\";\nimport { TokenStorageService } from \"./services/token-storage.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/service/bhaki-service\";\nimport * as i2 from \"./services/token-storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nfunction LoginFormComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 15);\n  }\n}\nconst form = new FormGroup({\n  email: new FormControl(\"\", [Validators.required, Validators.email, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n  password: new FormControl({\n    value: \"\",\n    disabled: false\n  }, [Validators.required])\n});\nexport let LoginFormComponent = /*#__PURE__*/(() => {\n  class LoginFormComponent {\n    constructor(authService, tokenStorage, router) {\n      this.authService = authService;\n      this.tokenStorage = tokenStorage;\n      this.router = router;\n      this.submitted = false;\n      this.hideSpinner = true;\n      this.showSpinner = new BehaviorSubject(false);\n      this.fields = {\n        email: \"email\",\n        password: \"password\"\n      };\n      this.isLoggedIn = false;\n      this.isLoginFailed = false;\n      this.erroMessage = \"\";\n      this.roles = [];\n      this.loginForm = form;\n      this.login = \"\";\n      this.password = \"\";\n    }\n    ngOnInit() {\n      //checking if the token is already set i.e user already logged in\n      if (this.tokenStorage.getToken()) {\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n      }\n      this.showSpinner.subscribe(res => {\n        this.hideSpinner = res;\n      });\n    }\n    onLogin() {\n      this.showSpinner.next(true);\n      if (!this.loginForm.valid) {\n        return;\n      }\n      this.authService.login({\n        username: this.loginForm.value.email,\n        password: this.loginForm.value.password\n      }).subscribe(data => {\n        if (data == null) {\n          this.isLoginFailed = true;\n        } else {\n          this.showSpinner.next(false);\n          this.tokenStorage.saveToken(data.token.token);\n          this.tokenStorage.saveUser(data.userDetails);\n          this.isLoginFailed = false;\n          this.isLoggedIn = true;\n          this.roles = data.userDetails.role;\n          if (this.roles.includes('Admin') === true) {\n            this.router.navigate([\"dashboard\"]);\n          } else {\n            this.router.navigate([\"registration\"]);\n          }\n        }\n      }, err => {\n        this.showSpinner.next(false);\n        this.isLoginFailed = true;\n      });\n    }\n    static #_ = this.ɵfac = function LoginFormComponent_Factory(t) {\n      return new (t || LoginFormComponent)(i0.ɵɵdirectiveInject(i1.HostService), i0.ɵɵdirectiveInject(i2.TokenStorageService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginFormComponent,\n      selectors: [[\"app-login-form\"]],\n      decls: 25,\n      vars: 6,\n      consts: [[1, \"main-content\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\", 2, \"padding-top\", \"2rem\"], [1, \"card-title\"], [1, \"card-body\"], [3, \"formGroup\"], [1, \"col-md-6\", \"colomns\"], [1, \"example-full-width\"], [\"matInput\", \"\", \"placeholder\", \"eMail Address\", \"type\", \"text\", \"required\", \"\", 3, \"formControlName\", \"id\"], [\"matInput\", \"\", \"placeholder\", \"Password\", \"type\", \"password\", \"required\", \"\", 3, \"formControlName\", \"id\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-info\", \"center\", \"button\", 2, \"margin-top\", \"1rem\", \"align-self\", \"center\", 3, \"click\"], [\"class\", \"loader\", 4, \"ngIf\"], [1, \"loader\"]],\n      template: function LoginFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h4\", 6);\n          i0.ɵɵtext(7, \"Login\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8)(10, \"div\", 2)(11, \"div\", 9)(12, \"p\");\n          i0.ɵɵtext(13, \"Please enter email address\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"mat-form-field\", 10);\n          i0.ɵɵelement(15, \"input\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(16, \"div\", 2)(17, \"div\", 9)(18, \"p\");\n          i0.ɵɵtext(19, \"Please enter password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"mat-form-field\", 10);\n          i0.ɵɵelement(21, \"input\", 12);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(22, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function LoginFormComponent_Template_button_click_22_listener() {\n            return ctx.onLogin();\n          });\n          i0.ɵɵtext(23, \"Login\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(24, LoginFormComponent_div_24_Template, 1, 0, \"div\", 14);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formControlName\", ctx.fields.email)(\"id\", ctx.fields.email);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formControlName\", ctx.fields.password)(\"id\", ctx.fields.password);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.hideSpinner);\n        }\n      },\n      dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.FormGroupDirective, i5.FormControlName, i6.MatButton, i7.MatFormField, i8.MatInput],\n      styles: [\".login-container[_ngcontent-%COMP%]{max-width:400px;margin:60px auto 0}.error[_ngcontent-%COMP%]{color:tomato;font-size:12px;padding-top:4px}.container-fluid[_ngcontent-%COMP%]{margin-top:10rem;max-width:initial}@media screen and (min-width: 768px){.container-fluid[_ngcontent-%COMP%]{max-width:45%}}p[_ngcontent-%COMP%]{margin-top:0;margin-bottom:0rem}.card-title[_ngcontent-%COMP%]{font-size:25px;font-weight:500}.loader[_ngcontent-%COMP%], .loader[_ngcontent-%COMP%]:before, .loader[_ngcontent-%COMP%]:after{background:#000;animation:_ngcontent-%COMP%_load1 1s infinite ease-in-out;width:1em;height:4em}.loader[_ngcontent-%COMP%]{color:#000;text-indent:-9999em;margin:88px auto;position:relative;font-size:11px;transform:translateZ(0);animation-delay:-.16s}.loader[_ngcontent-%COMP%]:before, .loader[_ngcontent-%COMP%]:after{position:absolute;top:0;content:\\\"\\\"}.loader[_ngcontent-%COMP%]:before{left:-1.5em;animation-delay:-.32s}.loader[_ngcontent-%COMP%]:after{left:1.5em}@keyframes _ngcontent-%COMP%_load1{0%,80%,to{box-shadow:0 0;height:4em}40%{box-shadow:0 -2em;height:5em}}\"]\n    });\n  }\n  return LoginFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}